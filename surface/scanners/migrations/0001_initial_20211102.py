# Generated by Django 3.2.8 on 2021-11-02 10:46

import core_utils.fields
from django.db import migrations, models
import django.db.models.deletion
import scanners.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Rootbox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('ip', models.CharField(max_length=255)),
                ('ssh_user', models.CharField(blank=True, max_length=255, null=True)),
                ('ssh_port', models.CharField(blank=True, max_length=255, null=True)),
                ('ssh_key', models.CharField(blank=True, max_length=255, null=True)),
                ('dockerd_port', models.IntegerField(default=80, help_text='TCP port to use for dockerd')),
                (
                    'dockerd_tls',
                    models.BooleanField(default=True, help_text='Use TLS with dockerd', verbose_name='Dockerd TLS'),
                ),
                ('location', models.CharField(default='', max_length=255)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Rootboxes',
                'permissions': (('check_scanners', 'Can check scanners'),),
            },
        ),
        migrations.CreateModel(
            name='ScanLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=128, unique=True)),
                ('first_seen', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('last_seen', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                (
                    'state',
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, 'Created'),
                            (2, 'Restarting'),
                            (3, 'Running'),
                            (4, 'Removing'),
                            (5, 'Paused'),
                            (6, 'Exited'),
                            (7, 'Dead'),
                        ],
                        db_index=True,
                        null=True,
                    ),
                ),
                ('exit_code', models.IntegerField(blank=True, db_index=True, null=True)),
                (
                    'rootbox',
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scanners.rootbox'
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='ScannerImage',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('vault_secrets', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Scanner Image',
                'verbose_name_plural': 'Scanner Images',
            },
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ScanOutput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('line', models.TextField()),
                (
                    'log',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name='output_lines', to='scanners.scanlog'
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Scanner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('docker_tag', models.CharField(default='latest', help_text='Not sure? Use latest', max_length=50)),
                ('continous_running', models.BooleanField(db_index=True, default=False)),
                ('scanner_name', models.CharField(max_length=255, unique=True)),
                ('input', scanners.models.FakeChoicesCharField(blank=True, db_index=True, max_length=30, null=True)),
                ('parser', scanners.models.FakeChoicesCharField(blank=True, db_index=True, max_length=20, null=True)),
                ('extra_args', models.CharField(blank=True, max_length=255, null=True)),
                (
                    'environment_vars',
                    models.TextField(
                        blank=True, help_text='Environment variables in json format to be passed to ansible.', null=True
                    ),
                ),
                ('notes', models.TextField(blank=True, null=True)),
                (
                    'image',
                    models.ForeignKey(
                        blank=True, on_delete=django.db.models.deletion.CASCADE, to='scanners.scannerimage'
                    ),
                ),
                (
                    'rootbox',
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='scanners.rootbox'
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name='scanlog',
            name='scanner',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scanners.scanner'
            ),
        ),
        migrations.CreateModel(
            name='RawResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('first_seen', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('last_seen', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('file_name', models.CharField(blank=True, max_length=255, null=True)),
                ('raw_results', models.TextField(blank=True, null=True)),
                (
                    'rootbox',
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scanners.rootbox'
                    ),
                ),
                (
                    'scanner',
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scanners.scanner'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Scanner Result - Raw',
                'verbose_name_plural': 'Scanner Results - Raw',
            },
        ),
        migrations.CreateModel(
            name='LiveHost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('first_seen', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('last_seen', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('host_object_id', models.PositiveIntegerField()),
                ('port', models.IntegerField(default=443)),
                ('status_code', models.IntegerField(null=True)),
                ('final_url', core_utils.fields.TruncatingCharField(blank=True, max_length=1024, null=True)),
                ('body_response', models.TextField(blank=True, null=True)),
                ('timing', models.CharField(blank=True, max_length=128, null=True)),
                ('redirects', models.TextField(blank=True, null=True)),
                ('third_party', models.BooleanField(default=False)),
                ('headers', models.TextField(blank=True, null=True)),
                ('cookies', models.TextField(blank=True, null=True)),
                (
                    'host_content_type',
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            models.Q(('app_label', 'dns_ips'), ('model', 'dnsrecord')),
                            models.Q(('app_label', 'dns_ips'), ('model', 'ipaddress')),
                            _connector='OR',
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        to='contenttypes.contenttype',
                    ),
                ),
                (
                    'rootbox',
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scanners.rootbox'
                    ),
                ),
                (
                    'scanner',
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scanners.scanner'
                    ),
                ),
                ('technologies', models.ManyToManyField(to='scanners.Technology')),
            ],
            options={
                'verbose_name': 'Scanner Result - Live Host',
                'verbose_name_plural': 'Scanner Results - Live Hosts',
            },
        ),
        migrations.CreateModel(
            name='TechUsedResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('first_seen', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('last_seen', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('application', models.CharField(db_index=True, max_length=255)),
                ('category', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('version', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('confidence', models.IntegerField(blank=True, db_index=True, null=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scanners.livehost')),
                (
                    'rootbox',
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scanners.rootbox'
                    ),
                ),
                (
                    'scanner',
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scanners.scanner'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Scanner Result - Tech Used',
                'verbose_name_plural': 'Scanner Results - Tech Used',
                'unique_together': {('host', 'application')},
            },
        ),
        migrations.AddIndex(
            model_name='scanoutput',
            index=models.Index(fields=['log', 'timestamp'], name='scanners_sc_log_id_2e2fdf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='livehost',
            unique_together={('host_content_type', 'host_object_id', 'port')},
        ),
    ]
